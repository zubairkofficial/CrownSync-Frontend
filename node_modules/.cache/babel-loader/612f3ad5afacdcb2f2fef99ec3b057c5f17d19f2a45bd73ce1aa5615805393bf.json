{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n}\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\nvar ModuleErrors = {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code\n  }\n};\nconst NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\nconst toNodeDescription = ({\n  type,\n  prefix\n}) => type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\nvar StandardErrors = {\n  AccessorIsGenerator: ({\n    kind\n  }) => `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext: \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses: \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport: \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace: 'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({\n    exportName\n  }) => `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({\n    phase\n  }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName\n  }) => `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: ({\n    type\n  }) => `'${type === \"ForInStatement\" ? \"for-in\" : \"for-of\"}' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: ({\n    type\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert: \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({\n    importName\n  }) => `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({\n    maxArgumentCount\n  }) => `\\`import()\\` requires exactly ${maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"}.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault: \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding: 'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({\n    radix\n  }) => `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({\n    reservedWord\n  }) => `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({\n    identifierName\n  }) => `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({\n    ancestor\n  }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({\n    ancestor\n  }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({\n    ancestor\n  }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({\n    unexpected\n  }) => `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({\n    labelName\n  }) => `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`,\n  MissingOneOfPlugins: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({\n    key\n  }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode\n  }) => `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`,\n  ModuleExportUndefined: ({\n    localName\n  }) => `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({\n    identifierName\n  }) => `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({\n    identifierName\n  }) => `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault: 'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({\n    keyword\n  }) => `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({\n    reservedWord\n  }) => `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected\n  }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${expected ? `, expected \"${expected}\"` : \"\"}`,\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration: \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName\n  }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern: \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({\n    identifierName\n  }) => `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n};\nvar StrictModeErrors = {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: ({\n    referenceName\n  }) => `Assigning to '${referenceName}' in strict mode.`,\n  StrictEvalArgumentsBinding: ({\n    bindingName\n  }) => `Binding '${bindingName}' in strict mode.`,\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\"\n};\nconst UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\nvar PipelineOperatorErrors = {\n  PipeBodyIsTighter: \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({\n    token\n  }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({\n    type\n  }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n    type\n  })}; please wrap it in parentheses.`,\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'\n};\nconst _excluded = [\"toMessage\"],\n  _excluded2 = [\"message\"];\nfunction defineHidden(obj, key, value) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value\n  });\n}\nfunction toParseErrorConstructor(_ref) {\n  let {\n      toMessage\n    } = _ref,\n    properties = _objectWithoutPropertiesLoose(_ref, _excluded);\n  return function constructor(loc, details) {\n    const error = new SyntaxError();\n    Object.assign(error, properties, {\n      loc,\n      pos: loc.index\n    });\n    if (\"missingPlugin\" in details) {\n      Object.assign(error, {\n        missingPlugin: details.missingPlugin\n      });\n    }\n    defineHidden(error, \"clone\", function clone(overrides = {}) {\n      var _overrides$loc;\n      const {\n        line,\n        column,\n        index\n      } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;\n      return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));\n    });\n    defineHidden(error, \"details\", details);\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get() {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value) {\n        Object.defineProperty(this, \"message\", {\n          value,\n          writable: true\n        });\n      }\n    });\n    return error;\n  };\n}\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n  const ParseErrorConstructors = {};\n  for (const reasonCode of Object.keys(argument)) {\n    const template = argument[reasonCode];\n    const _ref2 = typeof template === \"string\" ? {\n        message: () => template\n      } : typeof template === \"function\" ? {\n        message: template\n      } : template,\n      {\n        message\n      } = _ref2,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n    const toMessage = typeof message === \"string\" ? () => message : message;\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, rest));\n  }\n  return ParseErrorConstructors;\n}\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nconst {\n  defineProperty\n} = Object;\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\nfunction toESTreeLocation(node) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\nvar estree = superClass => class ESTreeParserMixin extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n    return file;\n  }\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n  parseBigIntLiteral(value) {\n    let bigInt;\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  directiveToStmt(directive) {\n    const expression = directive.value;\n    delete directive.value;\n    expression.type = \"Literal\";\n    expression.raw = expression.extra.raw;\n    expression.value = expression.extra.expressionValue;\n    const stmt = directive;\n    stmt.type = \"ExpressionStatement\";\n    stmt.expression = expression;\n    stmt.directive = expression.extra.rawValue;\n    delete expression.extra;\n    return stmt;\n  }\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n    classBody.body.push(method);\n  }\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n    return this.finishNode(node, \"MethodDefinition\");\n  }\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") {\n        node.kind = \"init\";\n      }\n      node.shorthand = false;\n    }\n    return node;\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n    return node;\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return type === \"Property\" ? \"value\" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n    return super.isAssignable(node, isBinding);\n  }\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n      this.toAssignable(value, isLHS);\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(Errors.PatternHasAccessor, prop.key);\n    } else if (prop.method) {\n      this.raise(Errors.PatternHasMethod, prop.key);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n    }\n  }\n  finishCallExpression(unfinished, optional) {\n    const node = super.finishCallExpression(unfinished, optional);\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$, _node$arguments$2;\n        node.options = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n        node.attributes = (_node$arguments$2 = node.arguments[1]) != null ? _node$arguments$2 : null;\n      }\n      delete node.arguments;\n      delete node.callee;\n    }\n    return node;\n  }\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n    super.toReferencedArguments(node);\n  }\n  parseExport(unfinished, decorators) {\n    const exportStartLoc = this.state.lastTokStartLoc;\n    const node = super.parseExport(unfinished, decorators);\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n      case \"ExportDefaultDeclaration\":\n        {\n          var _declaration$decorato;\n          const {\n            declaration\n          } = node;\n          if ((declaration == null ? void 0 : declaration.type) === \"ClassDeclaration\" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {\n            this.resetStartLocation(node, exportStartLoc);\n          }\n        }\n        break;\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startLoc, noCalls, state);\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n    return node;\n  }\n  isOptionalMemberExpression(node) {\n    if (node.type === \"ChainExpression\") {\n      return node.expression.type === \"MemberExpression\";\n    }\n    return super.isOptionalMemberExpression(node);\n  }\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n    return super.hasPropertyAsPrivateName(node);\n  }\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n  resetStartLocation(node, startLoc) {\n    super.resetStartLocation(node, startLoc);\n    toESTreeLocation(node);\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n};\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass ExportedTokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n}\nconst keywords$1 = new Map();\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\nfunction createToken(name, options = {}) {\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\nfunction createKeywordLike(name, options = {}) {\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _defer: createKeywordLike(\"defer\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _source: createKeywordLike(\"source\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _using: createKeywordLike(\"using\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _satisfies: createKeywordLike(\"satisfies\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 132;\n}\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 132;\n}\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 136;\n}\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 129 && token <= 131;\n}\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 121 && token <= 123;\n}\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 124 && token <= 130;\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n  tokenTypes[142].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\nclass Scope {\n  constructor(flags) {\n    this.flags = 0;\n    this.names = new Map();\n    this.firstLexicalName = \"\";\n    this.flags = flags;\n  }\n}\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n  get inTopLevel() {\n    return (this.currentScope().flags & 1) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & 2) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & 16) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & 32) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & 64) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & 64) > 0 && (flags & 2) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & 128) {\n        return true;\n      }\n      if (flags & (387 | 64)) {\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & 2) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n  createScope(flags) {\n    return new Scope(flags);\n  }\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n  exit() {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (2 | 128) || !this.parser.inModule && scope.flags & 1);\n  }\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n    if (bindingType & 8 || bindingType & 16) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      let type = scope.names.get(name) || 0;\n      if (bindingType & 16) {\n        type = type | 4;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | 2;\n      }\n      scope.names.set(name, type);\n      if (bindingType & 8) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & 4) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | 1);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & 387) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & 1) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & 1) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name\n      });\n    }\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & 1)) return false;\n    if (bindingType & 8) {\n      return scope.names.has(name);\n    }\n    const type = scope.names.get(name);\n    if (bindingType & 16) {\n      return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope) && (type & 1) > 0;\n    }\n    return (type & 2) > 0 && !(scope.flags & 8 && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (type & 4) > 0;\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & 387) {\n        return flags;\n      }\n    }\n  }\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & (387 | 64) && !(flags & 4)) {\n        return flags;\n      }\n    }\n  }\n}\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n}\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n    if (bindingType & 2048) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n    if (bindingType & 2048 && !scope.declareFunctions.has(name)) {\n      const type = scope.names.get(name);\n      return (type & 4) > 0 || (type & 2) > 0;\n    }\n    return false;\n  }\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n}\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    const {\n      commentsLen\n    } = this.state;\n    if (this.comments.length != commentsLen) this.comments.length = commentsLen;\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n    const {\n      start: nodeStart\n    } = node;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        break;\n      }\n    }\n  }\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n  resetPreviousIdentifierLeadingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n    default:\n      return false;\n  }\n}\nclass State {\n  constructor() {\n    this.flags = 1024;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.labels = [];\n    this.commentsLen = 0;\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 139;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.context = [types.brace];\n    this.firstInvalidTemplateEscapePos = null;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n  get strict() {\n    return (this.flags & 1) > 0;\n  }\n  set strict(value) {\n    if (value) {\n      this.flags |= 1;\n    } else {\n      this.flags &= ~1;\n    }\n  }\n  init({\n    strictMode,\n    sourceType,\n    startLine,\n    startColumn\n  }) {\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n  get maybeInArrowParameters() {\n    return (this.flags & 2) > 0;\n  }\n  set maybeInArrowParameters(value) {\n    if (value) {\n      this.flags |= 2;\n    } else {\n      this.flags &= ~2;\n    }\n  }\n  get inType() {\n    return (this.flags & 4) > 0;\n  }\n  set inType(value) {\n    if (value) {\n      this.flags |= 4;\n    } else {\n      this.flags &= ~4;\n    }\n  }\n  get noAnonFunctionType() {\n    return (this.flags & 8) > 0;\n  }\n  set noAnonFunctionType(value) {\n    if (value) {\n      this.flags |= 8;\n    } else {\n      this.flags &= ~8;\n    }\n  }\n  get hasFlowComment() {\n    return (this.flags & 16) > 0;\n  }\n  set hasFlowComment(value) {\n    if (value) {\n      this.flags |= 16;\n    } else {\n      this.flags &= ~16;\n    }\n  }\n  get isAmbientContext() {\n    return (this.flags & 32) > 0;\n  }\n  set isAmbientContext(value) {\n    if (value) {\n      this.flags |= 32;\n    } else {\n      this.flags &= ~32;\n    }\n  }\n  get inAbstractClass() {\n    return (this.flags & 64) > 0;\n  }\n  set inAbstractClass(value) {\n    if (value) {\n      this.flags |= 64;\n    } else {\n      this.flags &= ~64;\n    }\n  }\n  get inDisallowConditionalTypesContext() {\n    return (this.flags & 128) > 0;\n  }\n  set inDisallowConditionalTypesContext(value) {\n    if (value) {\n      this.flags |= 128;\n    } else {\n      this.flags &= ~128;\n    }\n  }\n  get soloAwait() {\n    return (this.flags & 256) > 0;\n  }\n  set soloAwait(value) {\n    if (value) {\n      this.flags |= 256;\n    } else {\n      this.flags &= ~256;\n    }\n  }\n  get inFSharpPipelineDirectBody() {\n    return (this.flags & 512) > 0;\n  }\n  set inFSharpPipelineDirectBody(value) {\n    if (value) {\n      this.flags |= 512;\n    } else {\n      this.flags &= ~512;\n    }\n  }\n  get canStartJSXElement() {\n    return (this.flags & 1024) > 0;\n  }\n  set canStartJSXElement(value) {\n    if (value) {\n      this.flags |= 1024;\n    } else {\n      this.flags &= ~1024;\n    }\n  }\n  get containsEsc() {\n    return (this.flags & 2048) > 0;\n  }\n  set containsEsc(value) {\n    if (value) {\n      this.flags |= 2048;\n    } else {\n      this.flags &= ~2048;\n    }\n  }\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n  clone() {\n    const state = new State();\n    state.flags = this.flags;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n    return state;\n  }\n}\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors);\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = {\n          pos,\n          lineStart,\n          curLine\n        };\n      } else {\n        out += res.ch;\n      }\n      ({\n        pos,\n        lineStart,\n        curLine\n      } = res);\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n    containsInvalid: !!firstInvalidLoc\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === \"double\" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n    case 114:\n      return res(\"\\r\");\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n    case 116:\n      return res(\"\\t\");\n    case 98:\n      return res(\"\\b\");\n    case 118:\n      return res(\"\\u000b\");\n    case 102:\n      return res(\"\\f\");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res(\"\");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos\n  };\n}\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && bailOnError) {\n        return {\n          n: null,\n          pos\n        };\n      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n  return {\n    n: total,\n    pos\n  };\n}\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n  return {\n    code,\n    pos\n  };\n}\nfunction buildPosition(pos, lineStart, curLine) {\n  return new Position(curLine, pos - lineStart, pos);\n}\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n}\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.errorHandlers_readInt = {\n      invalidDigit: (pos, lineStart, curLine, radix) => {\n        if (!this.options.errorRecovery) return false;\n        this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n          radix\n        });\n        return true;\n      },\n      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),\n      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)\n    };\n    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {\n      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)\n    });\n    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: (pos, lineStart, curLine) => {\n        this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));\n      },\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));\n      }\n    });\n    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));\n      }\n    });\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n  next() {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  match(type) {\n    return this.state.type === type;\n  }\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n  nextTokenInLineStart() {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n  nextTokenInLineStartSince(pos) {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;\n  }\n  lookaheadInLineCharCode() {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (strict) {\n      this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at));\n      this.state.strictErrors.clear();\n    }\n  }\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(139);\n      return;\n    }\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n  skipBlockComment(commentEnd) {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment(\"*/\");\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            default:\n              break loop;\n          }\n          break;\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule && this.options.annexB) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule && this.options.annexB) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());\n    }\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());\n      }\n      this.state.pos += 2;\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(138, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(138, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n    this.finishOp(type, width);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n      return;\n    }\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());\n        }\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());\n        }\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === 94) {\n        this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n      this.finishOp(51, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(47, 1);\n  }\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n      this.finishOp(52, size);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(48, 1);\n  }\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());\n          }\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n        return;\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());\n          }\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n        return;\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n        return;\n      case 63:\n        this.readToken_question();\n        return;\n      case 96:\n        this.readTemplateToken();\n        return;\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n      case 47:\n        this.readToken_slash();\n        return;\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n      case 94:\n        this.readToken_caret();\n        return;\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n      case 60:\n        this.readToken_lt();\n        return;\n      case 62:\n        this.readToken_gt();\n        return;\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n      case 126:\n        this.finishOp(36, 1);\n        return;\n      case 64:\n        this.readToken_atSign();\n        return;\n      case 35:\n        this.readToken_numberSign();\n        return;\n      case 92:\n        this.readWord();\n        return;\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n    throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), {\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n        escaped = ch === 92;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n    this.finishToken(137, {\n      pattern: content,\n      flags: mods\n    });\n  }\n  readInt(radix, len, forceLen = false, allowNumSeparator = true) {\n    const {\n      n,\n      pos\n    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);\n    this.state.pos = pos;\n    return n;\n  }\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), {\n        radix\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(135, str);\n      return;\n    }\n    this.finishToken(134, val);\n  }\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n    if (isBigInt) {\n      this.finishToken(135, str);\n      return;\n    }\n    if (isDecimal) {\n      this.finishToken(136, str);\n      return;\n    }\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(134, val);\n  }\n  readCodePoint(throwOnInvalid) {\n    const {\n      code,\n      pos\n    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);\n    this.state.pos = pos;\n    return code;\n  }\n  readString(quote) {\n    const {\n      str,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(quote === 34 ? \"double\" : \"single\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(133, str);\n  }\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n  readTemplateToken() {\n    const opening = this.input[this.state.pos];\n    const {\n      str,\n      firstInvalidLoc,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(\"template\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);\n    }\n    if (this.input.codePointAt(pos) === 96) {\n      this.finishToken(24, firstInvalidLoc ? null : opening + str + \"`\");\n    } else {\n      this.state.pos++;\n      this.finishToken(25, firstInvalidLoc ? null : opening + str + \"${\");\n    }\n  }\n  recordStrictModeErrors(toParseError, at) {\n    const index = at.index;\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(132, word);\n    }\n  }\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n  raise(toParseError, at, details = {}) {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n  raiseOverwrite(toParseError, at, details = {}) {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError(loc, details);\n      }\n      if (error.loc.index < pos) break;\n    }\n    return this.raise(toParseError, at, details);\n  }\n  updateContext(prevType) {}\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, {\n      expected: type ? tokenLabelName(type) : null\n    });\n  }\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n    throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, {\n      missingPlugin: [pluginName]\n    });\n  }\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames\n      });\n    }\n  }\n  errorBuilder(error) {\n    return (pos, lineStart, curLine) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n}\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n}\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name\n        });\n      }\n    }\n  }\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n    if (elementType & 3) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & 4;\n        const newStatic = elementType & 4;\n        const oldKind = accessor & 3;\n        const newKind = elementType & 3;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name\n      });\n    }\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n  usePrivateName(name, loc) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name\n      });\n    }\n  }\n}\nclass ExpressionScope {\n  constructor(type = 0) {\n    this.type = type;\n  }\n  canBeArrowParameterDeclaration() {\n    return this.type === 2 || this.type === 1;\n  }\n  isCertainlyParameterDeclaration() {\n    return this.type === 3;\n  }\n}\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n  recordDeclarationError(ParsingErrorClass, at) {\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n  enter(scope) {\n    this.stack.push(scope);\n  }\n  exit() {\n    this.stack.pop();\n  }\n  recordParameterInitializerError(toParseError, node) {\n    const origin = node.loc.start;\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n  recordArrowParameterBindingError(error, node) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n  recordAsyncArrowParametersError(at) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === 2) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(3);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(1);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(2);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n  exit() {\n    this.stacks.pop();\n  }\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n  get hasAwait() {\n    return (this.currentFlags() & 2) > 0;\n  }\n  get hasYield() {\n    return (this.currentFlags() & 1) > 0;\n  }\n  get hasReturn() {\n    return (this.currentFlags() & 4) > 0;\n  }\n  get hasIn() {\n    return (this.currentFlags() & 8) > 0;\n  }\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);\n}\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value, enumerable = true) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n    return false;\n  }\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n  canInsertSemicolon() {\n    return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n      throw error;\n    }\n  }\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n    if (!andThrow) {\n      return hasErrors;\n    }\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n  enterInitialScopes() {\n    let paramFlags = 0;\n    if (this.inModule) {\n      paramFlags |= 2;\n    }\n    this.scope.enter(1);\n    this.prodParam.enter(paramFlags);\n  }\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n}\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n}\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n    return newNode;\n  };\n}\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAt(loc) {\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.loc.start);\n  }\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n  resetStartLocation(node, startLoc) {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: ({\n    reservedType\n  }) => `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName\n  }) => `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName\n  }) => `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({\n    enumName\n  }) => `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName\n  }) => `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName\n  }) => `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType\n  }) => `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName\n  }) => `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName\n  }) => `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion\n  }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName\n  }) => `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName\n  }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: Object.assign({\n    message: \"A binding pattern parameter cannot be optional in an implementation signature.\"\n  }, {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({\n    reservedType\n  }) => `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion\n  }) => `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n});\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = superClass => class FlowParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n  finishToken(type, val) {\n    if (type !== 133 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n    super.finishToken(type, val);\n  }\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n    super.addComment(comment);\n  }\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(110);\n    if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n    }\n    if (this.eat(10)) {\n      node.value = super.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n    return [type, predicate];\n  }\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, 2048, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(127)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);\n        }\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(130)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(131)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(129)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      this.unexpected();\n    }\n  }\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, 5, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n  flowParseDeclareModule(node) {\n    this.scope.enter(0);\n    if (this.match(133)) {\n      node.id = super.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n      if (this.match(83)) {\n        this.next();\n        if (!this.isContextual(130) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);\n        }\n        super.parseImport(bodyNode);\n      } else {\n        this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n      body.push(bodyNode);\n    }\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n        }\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n        }\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n        }\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {\n        node = this.parseExport(node, null);\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n    this.unexpected();\n  }\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(111);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    const finished = this.flowParseTypeAlias(node);\n    finished.type = \"DeclareTypeAlias\";\n    return finished;\n  }\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    const finished = this.flowParseOpaqueType(node, true);\n    finished.type = \"DeclareOpaqueType\";\n    return finished;\n  }\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n  flowParseInterfaceish(node, isClass) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n    if (isClass) {\n      node.implements = [];\n      node.mixins = [];\n      if (this.eatContextual(117)) {\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n      if (this.eatContextual(113)) {\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);\n    }\n  }\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, {\n      reservedType: word\n    });\n  }\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(130);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.supertype = null;\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n    node.impltype = null;\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n      }\n    }\n    return this.finishNode(node, \"TypeParameter\");\n  }\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n    if (this.match(47) || this.match(142)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    let defaultRequired = false;\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(129);\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n  flowParseObjectPropertyKey() {\n    return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(true);\n  }\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n    } else {\n      node.method = false;\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n      node.value = this.flowParseTypeInitialiser();\n    }\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    this.expect(10);\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n    nodeStart.exact = exact;\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n      if (allowProto && this.isContextual(118)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n      if (allowStatic && this.isContextual(106)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n      const variance = this.flowParseVariance();\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n        if (this.isContextual(99) || this.isContextual(104)) {\n          const lookahead = this.lookahead();\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n      this.flowObjectTypeSemicolon();\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);\n      }\n    }\n    this.expect(endDelim);\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, variance);\n        }\n        return null;\n      }\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);\n      }\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, variance);\n      }\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n        if (this.eat(17)) {\n          optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);\n    }\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, property);\n    }\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, property);\n    }\n  }\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n  flowParseQualifiedTypeIdentifier(startLoc, id) {\n    var _startLoc;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n    return node;\n  }\n  flowParseGenericType(startLoc, id) {\n    const node = this.startNodeAt(startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, node);\n      }\n      name = this.parseIdentifier(isThis);\n      if (this.eat(17)) {\n        optional = true;\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n        }\n      }\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n  flowIdentToTypeAnnotation(startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startLoc, id);\n    }\n  }\n  flowParsePrimaryType() {\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      case 10:\n        this.next();\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      case 133:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n          if (this.match(134)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n          if (this.match(135)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);\n        }\n        this.unexpected();\n        return;\n      case 134:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n      case 135:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n      case 87:\n        return this.flowParseTypeofType();\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(129)) {\n            return this.flowParseInterfaceType();\n          }\n          return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());\n        }\n    }\n    this.unexpected();\n  }\n  flowParsePostfixType() {\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n    return type;\n  }\n  flowParsePrefixType() {\n    const node = this.startNode();\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n    return param;\n  }\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 132 && this.state.value === \"_\") {\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n    return ident;\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  flowParseVariance() {\n    let variance = null;\n    if (this.match(53)) {\n      variance = this.startNode();\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n      this.next();\n      return this.finishNode(variance, \"Variance\");\n    }\n    return variance;\n  }\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      return;\n    }\n    super.parseFunctionBody(node, false, isMethod);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  parseStatementLike(flags) {\n    if (this.state.strict && this.isContextual(129)) {\n      const lookahead = this.lookahead();\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(126)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    const stmt = super.parseStatementLike(flags);\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n    return stmt;\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n    return super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {\n      return !this.state.containsEsc;\n    }\n    return super.shouldParseExportDeclaration();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {\n      return this.state.containsEsc;\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(126)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n      }\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n    while (stack.length !== 0) {\n      const node = stack.pop();\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n  finishArrowValidation(node) {\n    var _node$extra;\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(2 | 4);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n    return result;\n  }\n  parseParenItem(node, startLoc) {\n    node = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n    return node;\n  }\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n    super.assertModuleNodeAllowed(node);\n  }\n  parseExportDeclaration(node) {\n    if (this.isContextual(130)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        super.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(131)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(129)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(126)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n  eatExportStar(node) {\n    if (super.eatExportStar(node)) return true;\n    if (this.isContextual(130) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n    return hasNamespace;\n  }\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n    if (this.isContextual(125)) {\n      if (super.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      member.declare = true;\n    }\n    super.parseClassMember(classBody, member, state);\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, startLoc);\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n      }\n    }\n  }\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n        identifierName: fullWord\n      });\n    }\n    this.finishToken(132, fullWord);\n  }\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 123 && next === 124) {\n      this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        this.finishOp(18, 2);\n      } else {\n        this.finishOp(17, 1);\n      }\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      this.readIterator();\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    if (!isLHS && node.type === \"AssignmentExpression\" && node.left.type === \"TypeCastExpression\") {\n      node.left = this.typeCastToParameter(node.left);\n    }\n    super.toAssignable(node, isLHS);\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n      const expr = exprList[i];\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n      }\n    }\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n    return node;\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"TypeCastExpression\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassPrivateProperty(node);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    if (method.params && isConstructor) {\n      const params = method.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n      }\n    }\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    if (this.isContextual(113)) {\n      this.next();\n      const implemented = node.implements = [];\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length > 0) {\n      const param = params[0];\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n      }\n    }\n  }\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n    delete prop.variance;\n    let typeParameters;\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n    const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    if (typeParameters) {\n      (result.value || result).typeParameters = typeParameters;\n    }\n    return result;\n  }\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, param);\n      }\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n      }\n      param.optional = true;\n    }\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n    }\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, param);\n    }\n    this.resetEndLocation(param);\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n    }\n    return node;\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);\n    }\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(130)) {\n      if (!isExport) return true;\n      const ch = this.lookaheadCharCode();\n      return ch === 123 || ch === 42;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      if (!phase && this.match(65)) {\n        return;\n      }\n      node.exportKind = phase === \"type\" ? phase : \"value\";\n    } else {\n      if (phase === \"type\" && this.match(55)) this.unexpected();\n      node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n    let isBinding = false;\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, specifier, {\n            importName: firstIdent.value\n          });\n        }\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n    }\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n  parseFunctionParams(node, isConstructor) {\n    const kind = node.kind;\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n    let state = null;\n    let jsx;\n    if (this.hasPlugin(\"jsx\") && (this.match(142) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);\n          }\n          return arrow.node;\n        }\n        arrowExpression = arrow.node;\n      }\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);\n    }\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n    return super.parseArrow(node);\n  }\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n      }\n    }\n    super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.arguments = super.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n      throw arrow.error || result.error;\n    }\n    return super.parseSubscripts(base, startLoc, noCalls);\n  }\n  parseSubscript(base, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = super.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) {\n          node.optional = false;\n        }\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, subscriptState);\n  }\n  parseNewCallee(node) {\n    super.parseNewCallee(node);\n    let targs = null;\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n    node.typeArguments = targs;\n  }\n  parseAsyncArrowWithTypeParameters(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.parseFunctionParams(node, false);\n    if (!this.parseArrow(node)) return;\n    return super.parseArrowExpression(node, undefined, true);\n  }\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n    super.readToken_mult_modulo(code);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n    super.readToken_pipe_amp(code);\n  }\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());\n    }\n    return fileNode;\n  }\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n      }\n      this.hasFlowCommentCompletion();\n      const commentSkip = this.skipFlowComment();\n      if (commentSkip) {\n        this.state.pos += commentSkip;\n        this.state.hasFlowComment = true;\n      }\n      return;\n    }\n    return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n  }\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n    return false;\n  }\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n  }\n  flowEnumErrorBooleanMemberNotInitialized(loc, {\n    enumName,\n    memberName\n  }) {\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n      memberName,\n      enumName\n    });\n  }\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);\n  }\n  flowEnumErrorNumberMemberNotInitialized(loc, details) {\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n  }\n  flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);\n  }\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n    const endOfInit = () => this.match(12) || this.match(8);\n    switch (this.state.type) {\n      case 134:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 133:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n    if (explicitType === null) {\n      return;\n    }\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n      if (memberName === \"\") {\n        continue;\n      }\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, id, {\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n          memberName,\n          enumName\n        });\n      }\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n          enumName\n        });\n      }\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n          enumName\n        });\n      }\n      return initializedMembers;\n    }\n  }\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (!this.eatContextual(102)) return null;\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {\n        enumName\n      });\n    }\n    const {\n      value\n    } = this.state;\n    this.next();\n    if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n        enumName,\n        invalidEnumType: value\n      });\n    }\n    return value;\n  }\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n    return false;\n  }\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n};\nconst entities = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({\n    openingTagName\n  }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity\n  }) => `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\nvar jsx = superClass => class JSXParserMixin extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              this.finishToken(142);\n            } else {\n              super.getTokenFromCode(ch);\n            }\n            return;\n          }\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(141, out);\n          return;\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n      }\n    }\n  }\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(133, out);\n  }\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n      const codePoint = this.readInt(radix, undefined, false, \"bail\");\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n        ++this.state.pos;\n      }\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n    this.state.pos = startPos;\n    return \"&\";\n  }\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n    this.finishToken(140, this.input.slice(start, this.state.pos));\n  }\n  jsxParseIdentifier() {\n    const node = this.startNode();\n    if (this.match(140)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n  jsxParseNamespacedName() {\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n  jsxParseElementName() {\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n    return node;\n  }\n  jsxParseAttributeValue() {\n    let node;\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, node);\n        }\n        return node;\n      case 142:\n      case 133:\n        return this.parseExprAtom();\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n    }\n  }\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_expr);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n    this.setContext(previousContext);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n  jsxParseAttribute() {\n    const node = this.startNode();\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n  jsxParseOpeningElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(143)) {\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n    while (!this.match(56) && !this.match(143)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(143);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n  jsxParseClosingElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(143)) {\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    this.expect(143);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n  jsxParseElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startLoc);\n    let closingElement = null;\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 142:\n            startLoc = this.state.startLoc;\n            this.next();\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startLoc);\n              break contents;\n            }\n            children.push(this.jsxParseElementAt(startLoc));\n            break;\n          case 141:\n            children.push(this.parseExprAtom());\n            break;\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n              break;\n            }\n          default:\n            this.unexpected();\n        }\n      }\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n    node.children = children;\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);\n    }\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n  jsxParseElement() {\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startLoc);\n  }\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(141)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(142)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(142);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n  getTokenFromCode(code) {\n    const context = this.curContext();\n    if (context === types.j_expr) {\n      this.jsxReadToken();\n      return;\n    }\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        this.jsxReadWord();\n        return;\n      }\n      if (code === 62) {\n        ++this.state.pos;\n        this.finishToken(143);\n        return;\n      }\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        this.jsxReadString(code);\n        return;\n      }\n    }\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      this.finishToken(142);\n      return;\n    }\n    super.getTokenFromCode(code);\n  }\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n    if (type === 56 && prevType === 142) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 142) {\n      context.push(types.j_oTag);\n    } else if (type === 143) {\n      const out = context[context.length - 1];\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n};\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.tsNames = new Map();\n  }\n}\nclass TypeScriptScopeHandler extends ScopeHandler {\n  constructor(...args) {\n    super(...args);\n    this.importsStack = [];\n  }\n  createScope(flags) {\n    this.importsStack.push(new Set());\n    return new TypeScriptScope(flags);\n  }\n  enter(flags) {\n    if (flags == 256) {\n      this.importsStack.push(new Set());\n    }\n    super.enter(flags);\n  }\n  exit() {\n    const flags = super.exit();\n    if (flags == 256) {\n      this.importsStack.pop();\n    }\n    return flags;\n  }\n  hasImport(name, allowShadow) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n  declareName(name, bindingType, loc) {\n    if (bindingType & 4096) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n    if (bindingType & 1024) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | 16);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n    if (bindingType & 2) {\n      if (!(bindingType & 1)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | 1;\n    }\n    if (bindingType & 256) {\n      type = type | 2;\n    }\n    if (bindingType & 512) {\n      type = type | 4;\n    }\n    if (bindingType & 128) {\n      type = type | 8;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    const type = scope.tsNames.get(name);\n    if ((type & 2) > 0) {\n      if (bindingType & 256) {\n        const isConst = !!(bindingType & 512);\n        const wasConst = (type & 4) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & 128 && (type & 8) > 0) {\n      if (scope.names.get(name) & 2) {\n        return !!(bindingType & 1);\n      } else {\n        return false;\n      }\n    }\n    if (bindingType & 2 && (type & 1) > 0) {\n      return true;\n    }\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    if (this.hasImport(name)) return;\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if ((type & 1) > 0 || (type & 16) > 0) {\n        return;\n      }\n    }\n    super.checkLocalExport(id);\n  }\n}\nconst getOwn$1 = (object, key) => hasOwnProperty.call(object, key) && object[key];\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node);\n        } else if (parenthesized.type !== \"MemberExpression\" && !this.isOptionalMemberExpression(parenthesized)) {\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n          this.toAssignable(value, isLHS);\n          break;\n        }\n      case \"SpreadElement\":\n        {\n          throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\" + \" SpreadElement should be converted by .toAssignable's caller.\");\n        }\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, false);\n      this.toAssignable(arg, isLHS);\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    const end = exprList.length - 1;\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n      default:\n        return false;\n    }\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n  parseSpread(refExpressionErrors) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, 1);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n    return this.parseIdentifier();\n  }\n  parseBindingList(close, closeCharCode, flags) {\n    const allowEmpty = flags & 1;\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      startLoc\n    } = this.state;\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 138) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(prop, startLoc, false, false, true, false);\n  }\n  parseAssignableListItem(flags, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  parseAssignableListItemTypes(param, flags) {\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    var _startLoc, _left;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn$1({\n      AssignmentPattern: \"left\",\n      RestElement: \"argument\",\n      ObjectProperty: \"value\",\n      ParenthesizedExpression: \"expression\",\n      ArrayPattern: \"elements\",\n      ObjectPattern: \"properties\"\n    }, type);\n  }\n  isOptionalMemberExpression(expression) {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n  checkLVal(expression, {\n    in: ancestor,\n    binding = 64,\n    checkClashes = false,\n    strictModeChanged = false,\n    hasParenthesizedAncestor = false\n  }) {\n    var _expression$extra;\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n    const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor\n          });\n        }\n      }\n      if (binding !== 64) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n      const {\n        name\n      } = expression;\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n      return;\n    }\n    const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === \"AssignmentExpression\", binding);\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, expression, {\n        ancestor\n      });\n      return;\n    }\n    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor = type === \"ArrayPattern\" || type === \"ObjectPattern\" ? {\n      type\n    } : ancestor;\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression\n        });\n      }\n    }\n  }\n  checkIdentifier(at, bindingType, strictModeChanged = false) {\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === 64) {\n        this.raise(Errors.StrictEvalArguments, at, {\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name\n        });\n      }\n    }\n    if (bindingType & 8192 && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n    if (!(bindingType & 64)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);\n    return true;\n  }\n}\nconst getOwn = (object, key) => hasOwnProperty.call(object, key) && object[key];\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({\n    methodName\n  }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName\n  }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional: \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({\n    kind\n  }) => `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: ({\n    modifier\n  }) => `Accessibility modifier already seen.`,\n  DuplicateModifier: ({\n    modifier\n  }) => `Duplicate modifier: '${modifier}'.`,\n  EmptyHeritageClauseType: ({\n    token\n  }) => `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers\n  }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier\n  }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext: \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({\n    modifier\n  }) => `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({\n    modifier\n  }) => `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier\n  }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers\n  }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression: \"Invalid property access after an instantiation expression. \" + \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier\n  }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName\n  }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType: \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({\n    type\n  }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`\n});\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === \"in\" || modifier === \"out\";\n}\nvar typescript = superClass => class TypeScriptParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\"const\", \"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n    this.tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n    this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n  }\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {\n      return undefined;\n    }\n    const modifier = this.state.value;\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n    return undefined;\n  }\n  tsParseModifiers({\n    allowedModifiers,\n    disallowedModifiers,\n    stopOnStartOfClassStaticBlock,\n    errorTemplate = TSErrors.InvalidModifierOnTypeMember\n  }, modified) {\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, loc, {\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, loc, {\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else if (tsIsVarianceAnnotations(modifier)) {\n        if (modified[modifier]) {\n          this.raise(TSErrors.DuplicateModifier, startLoc, {\n            modifier\n          });\n        }\n        modified[modifier] = true;\n        enforceOrder(startLoc, modifier, \"in\", \"out\");\n      } else {\n        if (hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, startLoc, {\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n        modified[modifier] = true;\n      }\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, startLoc, {\n          modifier\n        });\n      }\n    }\n  }\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n      case \"HeritageClauseElement\":\n        return this.match(5);\n      case \"TupleElementTypes\":\n        return this.match(3);\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n  }\n  tsParseList(kind, parseElement) {\n    const result = [];\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n    return result;\n  }\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      trailingCommaPos = -1;\n      const element = parseElement();\n      if (element == null) {\n        return undefined;\n      }\n      result.push(element);\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStartLoc.index;\n        continue;\n      }\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      if (expectSuccess) {\n        this.expect(12);\n      }\n      return undefined;\n    }\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n    return result;\n  }\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n    return result;\n  }\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n    if (!this.match(133)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n    }\n    node.argument = super.parseExprAtom();\n    if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n      node.options = null;\n    }\n    if (this.eat(12)) {\n      this.expectImportAttributesPlugin();\n      if (!this.match(11)) {\n        node.options = super.parseMaybeAssignAllowIn();\n        this.eat(12);\n      }\n    }\n    this.expect(11);\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName();\n    }\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSImportType\");\n  }\n  tsParseEntityName(allowReservedWords = true) {\n    let entity = this.parseIdentifier(allowReservedWords);\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n    return entity;\n  }\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName();\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName();\n    }\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n  tsParseTypeParameter(parseModifiers) {\n    const node = this.startNode();\n    parseModifiers(node);\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsTryParseTypeParameters(parseModifiers) {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters(parseModifiers);\n    }\n  }\n  tsParseTypeParameters(parseModifiers) {\n    const node = this.startNode();\n    if (this.match(47) || this.match(142)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, node);\n    }\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n  tsParseBindingListForSignature() {\n    const list = super.parseBindingList(11, 41, 2);\n    for (const pattern of list) {\n      const {\n        type\n      } = pattern;\n      if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n          type\n        });\n      }\n    }\n    return list;\n  }\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n    return false;\n  }\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return;\n    }\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, node);\n      }\n      const method = nodeAny;\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, this.state.curPosition());\n      }\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, this.state.curPosition());\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, this.state.curPosition());\n        } else {\n          const firstParameter = method[paramsKey][0];\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());\n          }\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, this.state.curPosition());\n          }\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, this.state.curPosition());\n          }\n        }\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, method[returnTypeKey]);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n  tsParseTypeMember() {\n    const node = this.startNode();\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n    this.tsParseModifiers({\n      allowedModifiers: [\"readonly\"],\n      disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n    }, node);\n    const idx = this.tsTryParseIndexSignature(node);\n    if (idx) {\n      return idx;\n    }\n    super.parsePropertyName(node);\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      super.parsePropertyName(node);\n    }\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n  tsIsStartOfMappedType() {\n    this.next();\n    if (this.eat(53)) {\n      return this.isContextual(122);\n    }\n    if (this.isContextual(122)) {\n      this.next();\n    }\n    if (!this.match(0)) {\n      return false;\n    }\n    this.next();\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n    this.next();\n    return this.match(58);\n  }\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(122);\n    } else if (this.eatContextual(122)) {\n      node.readonly = true;\n    }\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      const {\n        type\n      } = elementNode;\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n      }\n      seenOptionalElement || (seenOptionalElement = type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\");\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n  tsParseTupleElementType() {\n    const {\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let labeled;\n    let label;\n    let optional;\n    let type;\n    const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n    const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n    if (chAfterWord === 58) {\n      labeled = true;\n      optional = false;\n      label = this.parseIdentifier(true);\n      this.expect(14);\n      type = this.tsParseType();\n    } else if (chAfterWord === 63) {\n      optional = true;\n      const startLoc = this.state.startLoc;\n      const wordName = this.state.value;\n      const typeOrLabel = this.tsParseNonArrayType();\n      if (this.lookaheadCharCode() === 58) {\n        labeled = true;\n        label = this.createIdentifier(this.startNodeAt(startLoc), wordName);\n        this.expect(17);\n        this.expect(14);\n        type = this.tsParseType();\n      } else {\n        labeled = false;\n        type = typeOrLabel;\n        this.expect(17);\n      }\n    } else {\n      type = this.tsParseType();\n      optional = this.eat(17);\n      labeled = this.eat(14);\n    }\n    if (labeled) {\n      let labeledNode;\n      if (label) {\n        labeledNode = this.startNodeAtNode(label);\n        labeledNode.optional = optional;\n        labeledNode.label = label;\n        labeledNode.elementType = type;\n        if (this.eat(17)) {\n          labeledNode.optional = true;\n          this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);\n        }\n      } else {\n        labeledNode = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n        this.raise(TSErrors.InvalidTupleMemberLabel, type);\n        labeledNode.label = type;\n        labeledNode.elementType = this.tsParseType();\n      }\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n    if (rest) {\n      const restNode = this.startNodeAt(startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n    return type;\n  }\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));\n    return this.finishNode(node, type);\n  }\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n    switch (this.state.type) {\n      case 134:\n      case 135:\n      case 133:\n      case 85:\n      case 86:\n        node.literal = super.parseExprAtom();\n        break;\n      default:\n        this.unexpected();\n    }\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = super.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 133:\n      case 134:\n      case 135:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n          if (nextToken.type !== 134 && nextToken.type !== 135) {\n            this.unexpected();\n          }\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n        break;\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n      case 87:\n        return this.tsParseTypeQuery();\n      case 83:\n        return this.tsParseImportType();\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n      case 0:\n        return this.tsParseTupleType();\n      case 10:\n        return this.tsParseParenthesizedType();\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n      default:\n        {\n          const {\n            type\n          } = this.state;\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n    this.unexpected();\n  }\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n    return type;\n  }\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, node);\n    }\n  }\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(115);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n  tsParseConstraintForInferType() {\n    if (this.eat(81)) {\n      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());\n      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n        return constraint;\n      }\n    }\n  }\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());\n  }\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        super.parseBindingList(3, 93, 1);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n    return false;\n  }\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n      if (this.match(11)) {\n        this.next();\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n  }\n  tsTryParseTypeAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeAnnotation();\n    }\n  }\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 109) {\n      return false;\n    }\n    const containsEsc = this.state.containsEsc;\n    this.next();\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, {\n        reservedWord: \"asserts\"\n      });\n    }\n    return true;\n  }\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());\n    this.expect(17);\n    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    this.expect(14);\n    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n  isAbstractConstructorSignature() {\n    return this.isContextual(124) && this.lookahead().type === 77;\n  }\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n    return this.tsParseUnionTypeOrHigher();\n  }\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n    }\n    const node = this.startNode();\n    node.typeAnnotation = this.tsInType(() => {\n      this.next();\n      return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();\n    });\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", () => {\n      const node = this.startNode();\n      node.expression = this.tsParseEntityName();\n      if (this.match(47)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    });\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n        token\n      });\n    }\n    return delimitedList;\n  }\n  tsParseInterfaceDeclaration(node, properties = {}) {\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(129);\n    if (properties.declare) node.declare = true;\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, 130);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n    }\n    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, 2);\n    node.typeAnnotation = this.tsInType(() => {\n      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);\n      this.expect(29);\n      if (this.isContextual(114) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n  tsInDisallowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsInAllowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = false;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsEatThenParseType(token) {\n    if (this.match(token)) {\n      return this.tsNextThenParseType();\n    }\n  }\n  tsExpectThenParseType(token) {\n    return this.tsInType(() => {\n      this.expect(token);\n      return this.tsParseType();\n    });\n  }\n  tsNextThenParseType() {\n    return this.tsInType(() => {\n      this.next();\n      return this.tsParseType();\n    });\n  }\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);\n    if (this.eat(29)) {\n      node.initializer = super.parseMaybeAssignAllowIn();\n    }\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n  tsParseEnumDeclaration(node, properties = {}) {\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(126);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? 8971 : 8459);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(0);\n    this.expect(5);\n    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n    if (!nested) {\n      this.checkIdentifier(node.id, 1024);\n    }\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(256);\n      this.prodParam.enter(0);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(112)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(133)) {\n      node.id = super.parseStringLiteral(this.state.value);\n    } else {\n      this.unexpected();\n    }\n    if (this.match(5)) {\n      this.scope.enter(256);\n      this.prodParam.enter(0);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {\n    node.isExport = isExport || false;\n    node.id = maybeDefaultIdentifier || this.parseIdentifier();\n    this.checkIdentifier(node.id, 4096);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n    }\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n  tsIsExternalModuleReference() {\n    return this.isContextual(119) && this.lookaheadCharCode() === 40;\n  }\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(119);\n    this.expect(10);\n    if (!this.match(133)) {\n      this.unexpected();\n    }\n    node.expression = super.parseExprAtom();\n    this.expect(11);\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n    if (result !== undefined && result !== false) {\n      return result;\n    }\n    this.state = state;\n  }\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n    let startType = this.state.type;\n    let kind;\n    if (this.isContextual(100)) {\n      startType = 74;\n      kind = \"let\";\n    }\n    return this.tsInAmbientContext(() => {\n      switch (startType) {\n        case 68:\n          nany.declare = true;\n          return super.parseFunctionStatement(nany, false, false);\n        case 80:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n        case 126:\n          return this.tsParseEnumDeclaration(nany, {\n            declare: true\n          });\n        case 112:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        case 75:\n        case 74:\n          if (!this.match(75) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n          this.expect(75);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true\n          });\n        case 129:\n          {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true\n            });\n            if (result) return result;\n          }\n        default:\n          if (tokenIsIdentifier(startType)) {\n            return this.tsParseDeclaration(nany, this.state.value, true, null);\n          }\n      }\n    });\n  }\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);\n  }\n  tsParseExpressionStatement(node, expr, decorators) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(256);\n          this.prodParam.enter(0);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n        break;\n      default:\n        return this.tsParseDeclaration(node, expr.name, false, decorators);\n    }\n  }\n  tsParseDeclaration(node, value, next, decorators) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node, decorators);\n        }\n        break;\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(133)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n        break;\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n        break;\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n        break;\n    }\n  }\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n    return !this.isLineTerminator();\n  }\n  tsTryParseGenericAsyncArrowFunction(startLoc) {\n    if (!this.match(47)) return;\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startLoc);\n      node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    if (!res) return;\n    return super.parseArrowExpression(res, null, true);\n  }\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) return;\n    return this.tsParseTypeArguments();\n  }\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, node);\n    } else if (!this.state.inType && this.curContext() === types.brace) {\n      this.reScan_lt_gt();\n    }\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n  parseAssignableListItem(flags, decorators) {\n    const startLoc = this.state.startLoc;\n    const modified = {};\n    this.tsParseModifiers({\n      allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n    }, modified);\n    const accessibility = modified.accessibility;\n    const override = modified.override;\n    const readonly = modified.readonly;\n    if (!(flags & 4) && (accessibility || readonly || override)) {\n      this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n    }\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startLoc);\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n      }\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  isSimpleParameter(node) {\n    return node.type === \"TSParameterProperty\" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n  tsDisallowOptionalPattern(node) {\n    for (const param of node.params) {\n      if (param.type !== \"Identifier\" && param.optional && !this.state.isAmbientContext) {\n        this.raise(TSErrors.PatternIsOptional, param);\n      }\n    }\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    this.tsDisallowOptionalPattern(node);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      return this.finishNode(node, bodilessType);\n    }\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n      if (node.declare) {\n        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n      }\n    }\n    this.tsDisallowOptionalPattern(node);\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, 1024);\n    } else {\n      super.registerFunctionStatementId(node);\n    }\n  }\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n      }\n    });\n  }\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n    let isOptionalCall = false;\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n        if (!typeArguments) return;\n        if (isOptionalCall && !this.match(10)) {\n          missingParenErrorLoc = this.state.curPosition();\n          return;\n        }\n        if (tokenIsTemplate(this.state.type)) {\n          const result = super.parseTaggedTemplateExpression(base, startLoc, state);\n          result.typeParameters = typeArguments;\n          return result;\n        }\n        if (!noCalls && this.eat(10)) {\n          const node = this.startNodeAt(startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(11, false);\n          this.tsCheckForInvalidTypeCasts(node.arguments);\n          node.typeParameters = typeArguments;\n          if (state.optionalChainMember) {\n            node.optional = isOptionalCall;\n          }\n          return this.finishCallExpression(node, state.optionalChainMember);\n        }\n        const tokenType = this.state.type;\n        if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {\n          return;\n        }\n        const node = this.startNodeAt(startLoc);\n        node.expression = base;\n        node.typeParameters = typeArguments;\n        return this.finishNode(node, \"TSInstantiationExpression\");\n      });\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n      if (result) {\n        if (result.type === \"TSInstantiationExpression\" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {\n          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);\n        }\n        return result;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, state);\n  }\n  parseNewCallee(node) {\n    var _callee$extra;\n    super.parseNewCallee(node);\n    const {\n      callee\n    } = node;\n    if (callee.type === \"TSInstantiationExpression\" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n      node.typeParameters = callee.typeParameters;\n      node.callee = callee.expression;\n    }\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    let isSatisfies;\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {\n      const node = this.startNodeAt(leftStartLoc);\n      node.expression = left;\n      node.typeAnnotation = this.tsInType(() => {\n        this.next();\n        if (this.match(75)) {\n          if (isSatisfies) {\n            this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n              keyword: \"const\"\n            });\n          }\n          return this.tsParseTypeReference();\n        }\n        return this.tsParseType();\n      });\n      this.finishNode(node, isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartLoc, minPrec);\n    }\n    return super.parseExprOp(left, leftStartLoc, minPrec);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);\n    }\n  }\n  checkDuplicateExports() {}\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(130)) {\n      const ch = this.lookaheadCharCode();\n      return isExport ? ch === 123 || ch === 42 : ch !== 61;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      node.exportKind = phase === \"type\" ? \"type\" : \"value\";\n    } else {\n      node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n    }\n  }\n  parseImport(node) {\n    if (this.match(133)) {\n      node.importKind = \"value\";\n      return super.parseImport(node);\n    }\n    let importNode;\n    if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {\n      node.importKind = \"value\";\n      return this.tsParseImportEqualsDeclaration(node);\n    } else if (this.isContextual(130)) {\n      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n      if (this.lookaheadCharCode() === 61) {\n        return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);\n      } else {\n        importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);\n      }\n    } else {\n      importNode = super.parseImport(node);\n    }\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n    }\n    return importNode;\n  }\n  parseExport(node, decorators) {\n    if (this.match(83)) {\n      this.next();\n      let maybeDefaultIdentifier = null;\n      if (this.isContextual(130) && this.isPotentialImportPhase(false)) {\n        maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n      } else {\n        node.importKind = \"value\";\n      }\n      return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = super.parseExpression();\n      this.semicolon();\n      this.sawUnambiguousESM = true;\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(128);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      return super.parseExport(node, decorators);\n    }\n  }\n  isAbstractClass() {\n    return this.isContextual(124) && this.lookahead().type === 80;\n  }\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      return this.parseClass(cls, true, true);\n    }\n    if (this.match(129)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n      if (kind !== \"const\" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n      } else if (!isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))) {\n        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, init);\n      }\n    }\n    return declaration;\n  }\n  parseStatementContent(flags, decorators) {\n    if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n    if (this.isContextual(126)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n    if (this.isContextual(129)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseStatementContent(flags, decorators);\n  }\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n      return !!member[modifier];\n    });\n  }\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(106) && this.lookaheadCharCode() === 123;\n  }\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers({\n      allowedModifiers: modifiers,\n      disallowedModifiers: [\"in\", \"out\"],\n      stopOnStartOfClassStaticBlock: true,\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    }, member);\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());\n        }\n        super.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n    if (idx) {\n      classBody.body.push(idx);\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, member);\n      }\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n          modifier: member.accessibility\n        });\n      }\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, member);\n      }\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, member);\n      }\n      return;\n    }\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n    }\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, member);\n      }\n    }\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n    }\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n    }\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;\n    return decl || super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n    const result = this.tryParse(() => super.parseConditional(expr, startLoc));\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n      return expr;\n    }\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  parseParenItem(node, startLoc) {\n    node = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n    return node;\n  }\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(125)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(125);\n    if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);\n    }\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n    if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n      node.exportKind = \"type\";\n    }\n    if (isDeclare) {\n      this.resetStartLocation(declaration, startLoc);\n      declaration.declare = true;\n    }\n    return declaration;\n  }\n  parseClassId(node, isStatement, optionalId, bindingType) {\n    if ((!isStatement || optionalId) && this.isContextual(113)) {\n      return;\n    }\n    super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional) {\n      if (this.eat(35)) {\n        node.definite = true;\n      } else if (this.eat(17)) {\n        node.optional = true;\n      }\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);\n    }\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, {\n        propertyName: key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n      });\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, node);\n    }\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n        modifier: node.accessibility\n      });\n    }\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n  parseClassAccessorProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (node.optional) {\n      this.raise(TSErrors.AccessorCannotBeOptional, node);\n    }\n    return super.parseClassAccessorProperty(node);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n    }\n    const {\n      declare = false,\n      kind\n    } = method;\n    if (declare && (kind === \"get\" || kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, method, {\n        kind\n      });\n    }\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n    if (this.eatContextual(113)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) prop.typeParameters = typeParameters;\n    return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n  }\n  parseFunctionParams(node, isConstructor) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;\n    let state;\n    let jsx;\n    let typeCast;\n    if (this.hasPlugin(\"jsx\") && (this.match(142) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n    if (!state || state === this.state) state = this.state.clone();\n    let typeParameters;\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n      typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n    throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);\n  }\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n    if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, node);\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    }\n    return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n    return super.parseArrow(node);\n  }\n  parseAssignableListItemTypes(param, flags) {\n    if (!(flags & 2)) return param;\n    if (this.eat(17)) {\n      param.optional = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n      case \"TSParameterProperty\":\n        return true;\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.toAssignableParenthesizedExpression(node, isLHS);\n        break;\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        if (isLHS) {\n          this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node);\n        } else {\n          this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n        }\n        this.toAssignable(node.expression, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isLHS);\n        break;\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSTypeAssertion\":\n      case \"TSNonNullExpression\":\n        this.checkToRestConversion(node.expression, false);\n        break;\n      default:\n        super.checkToRestConversion(node, allowPattern);\n    }\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn({\n      TSTypeCastExpression: true,\n      TSParameterProperty: \"parameter\",\n      TSNonNullExpression: \"expression\",\n      TSAsExpression: (binding !== 64 || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSSatisfiesExpression: (binding !== 64 || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSTypeAssertion: (binding !== 64 || !isUnparenthesizedInAssign) && [\"expression\", true]\n    }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  parseBindingAtom() {\n    if (this.state.type === 78) {\n      return this.parseIdentifier(true);\n    }\n    return super.parseBindingAtom();\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n      this.unexpected(null, 10);\n    }\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    }\n    return super.checkCommaAfterRest(close);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n    }\n    return node;\n  }\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        this.finishOp(48, 1);\n        return;\n      }\n      if (code === 60) {\n        this.finishOp(47, 1);\n        return;\n      }\n    }\n    super.getTokenFromCode(code);\n  }\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n    return type;\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n    return super.shouldParseArrow(params);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n    return param;\n  }\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n  parseClass(node, isStatement, optionalId) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n    try {\n      return super.parseClass(node, isStatement, optionalId);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n  tsParseAbstractDeclaration(node, decorators) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));\n    } else if (this.isContextual(129)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {\n    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n          methodName: key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n        });\n      }\n    }\n    return method;\n  }\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.parse();\n  }\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.getExpression();\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);\n  }\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      if (isImport) {\n        leftOfAs = this.parseIdentifier(true);\n        if (!this.isContextual(93)) {\n          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n        }\n      } else {\n        leftOfAs = this.parseModuleExportName();\n      }\n    }\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);\n    }\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);\n    }\n  }\n};\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  const {\n    computed,\n    property\n  } = expression;\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nfunction isValidAmbientConstInitializer(expression, estree) {\n  var _expression$extra;\n  const {\n    type\n  } = expression;\n  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const {\n        value\n      } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\nfunction isNumber(expression, estree) {\n  if (estree) {\n    return expression.type === \"Literal\" && (typeof expression.value === \"number\" || \"bigint\" in expression);\n  }\n  return expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\";\n}\nfunction isNegativeNumber(expression, estree) {\n  if (expression.type === \"UnaryExpression\") {\n    const {\n      operator,\n      argument\n    } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\"\n});\nvar placeholders = superClass => class PlaceholdersParserMixin extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(144)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(144);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      this.finishOp(144, 2);\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(refExpressionErrors);\n  }\n  parseIdentifier(liberal) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word !== undefined) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"Placeholder\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  toAssignable(node, isLHS) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (super.chStartsBindingIdentifier(ch, pos)) {\n      return true;\n    }\n    const nextToken = this.lookahead();\n    if (nextToken.type === 144) {\n      return true;\n    }\n    return false;\n  }\n  verifyBreakContinue(node, isBreak) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(node, isBreak);\n  }\n  parseExpressionStatement(node, expr) {\n    var _expr$extra;\n    if (expr.type !== \"Placeholder\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n      return super.parseExpressionStatement(node, expr);\n    }\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);\n  }\n  parseFunctionId(requireId) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId);\n  }\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (placeholder) {\n      if (this.match(81) || this.match(144) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n    super.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || super.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n  parseExport(node, decorators) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(node, decorators);\n    if (!this.isContextual(98) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node, decorators);\n  }\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(144), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    var _specifiers;\n    if ((_specifiers = node.specifiers) != null && _specifiers.length) {\n      return true;\n    }\n    return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n  }\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(node);\n    node.specifiers = [];\n    if (!this.isContextual(98) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    node.specifiers.push(this.finishNode(specifier, \"ImportDefaultSpecifier\"));\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n    this.expectContextual(98);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource();\n  }\n  assertNoSpace() {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n    }\n  }\n};\nvar v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName();\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);\n  }\n};\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return plugin[1][option];\n  }\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean, if specified.\");\n    }\n    const allowCallParenthesized = getPluginOption(plugins, \"decorators\", \"allowCallParenthesized\");\n    if (allowCallParenthesized != null && typeof allowCallParenthesized !== \"boolean\") {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\") || hasPlugin(plugins, \"importAttributes\")) {\n        throw new Error(\"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\");\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n  if (hasPlugin(plugins, \"importAssertions\") && hasPlugin(plugins, \"importAttributes\")) {\n    throw new Error(\"Cannot combine importAssertions and importAttributes plugins.\");\n  }\n  if (hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n  if (hasPlugin(plugins, \"optionalChainingAssign\") && getPluginOption(plugins, \"optionalChainingAssign\", \"version\") !== \"2023-07\") {\n    throw new Error(\"The 'optionalChainingAssign' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is '2023-07'.\");\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowNewTargetOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createImportExpressions: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true,\n  annexB: true\n};\nfunction getOptions(opts) {\n  if (opts == null) {\n    return Object.assign({}, defaultOptions);\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n  const options = {};\n  for (const key of Object.keys(defaultOptions)) {\n    var _opts$key;\n    options[key] = (_opts$key = opts[key]) != null ? _opts$key : defaultOptions[key];\n  }\n  return options;\n}\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n      protoRef.used = true;\n    }\n  }\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(139)) {\n      this.unexpected();\n    }\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n  parseExpressionBase(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(12)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(108)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const {\n      type\n    } = this.state;\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      if (this.match(29)) {\n        this.toAssignable(left, true);\n        node.left = left;\n        const startIndex = startLoc.index;\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\")\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    return left;\n  }\n  parseMaybeConditional(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n  parseExprOps(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value\n        });\n      }\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n        this.next();\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);\n          }\n        }\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);\n        }\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n  parseExprOpRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(108)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n  parseExprOpBaseRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n  parseHackPipeBody() {\n    var _body$extra;\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n    return body;\n  }\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(34);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n    return expr;\n  }\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      const updateExpressionNode = node;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\")\n      });\n      return node;\n    }\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: expr = this.finishNode(node, \"UpdateExpression\")\n      });\n    }\n    return expr;\n  }\n  parseExprSubscripts(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseSubscripts(expr, startLoc);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n    let optional = false;\n    if (type === 18) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n  parseMember(base, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(138)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n  parseBind(base, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startLoc, noCalls);\n  }\n  parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    const node = this.startNodeAt(startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n    let finishedNode = this.finishCallExpression(node, optionalChainMember);\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return finishedNode;\n  }\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n  parseTaggedTemplateExpression(base, startLoc, state) {\n    const node = this.startNodeAt(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n  expectImportAttributesPlugin() {\n    if (!this.hasPlugin(\"importAssertions\")) {\n      this.expectPlugin(\"importAttributes\");\n    }\n  }\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectImportAttributesPlugin();\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node, {\n          maxArgumentCount: this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAttributes\") && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, this.state.lastTokStartLoc);\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n  parseNoCallExpr() {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    let decorators = null;\n    const {\n      type\n    } = this.state;\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n      case 83:\n        node = this.startNode();\n        this.next();\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n        if (this.match(10)) {\n          if (this.options.createImportExpressions) {\n            return this.parseImportCall(node);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n      case 134:\n        return this.parseNumericLiteral(this.state.value);\n      case 135:\n        return this.parseBigIntLiteral(this.state.value);\n      case 136:\n        return this.parseDecimalLiteral(this.state.value);\n      case 133:\n        return this.parseStringLiteral(this.state.value);\n      case 84:\n        return this.parseNullLiteral();\n      case 85:\n        return this.parseBooleanLiteral(true);\n      case 86:\n        return this.parseBooleanLiteral(false);\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n      case 26:\n        decorators = this.parseDecorators();\n      case 80:\n        return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);\n      case 77:\n        return this.parseNewOrNewTarget();\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, callee);\n          }\n        }\n      case 138:\n        {\n          this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          }\n          this.unexpected();\n          break;\n        }\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          } else {\n            this.unexpected();\n          }\n          break;\n        }\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc);\n      }\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n      case \"smart\":\n        return tokenType === 27;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(19);\n    return this.parseArrowExpression(node, params, true);\n  }\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      this.prodParam.enter(2);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n    return this.finishNode(node, \"Super\");\n  }\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      if (this.match(103)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n    if (this.isContextual(101)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(105) || this.isContextual(97)) {\n      const isSource = this.isContextual(105);\n      if (!isSource) this.unexpected();\n      this.expectPlugin(isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\");\n      if (!this.options.createImportExpressions) {\n        throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {\n          phase: this.state.value\n        });\n      }\n      this.next();\n      node.phase = isSource ? \"source\" : \"defer\";\n      return this.parseImportCall(node);\n    }\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n      if (this.match(21)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startLoc);\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n    return this.wrapParenthesis(startLoc, val);\n  }\n  wrapParenthesis(startLoc, expression) {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n      this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);\n      return expression;\n    }\n    const parenExpression = this.startNodeAt(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n  parseParenItem(node, startLoc) {\n    return node;\n  }\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n      return metaProp;\n    }\n    return this.parseNew(node);\n  }\n  parseNew(node) {\n    this.parseNewCallee(node);\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n    return this.finishNode(node, \"NewExpression\");\n  }\n  parseNewCallee(node) {\n    const isImport = this.match(83);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (isImport && (callee.type === \"Import\" || callee.type === \"ImportExpression\")) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));\n      }\n    }\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return finishedNode;\n  }\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n      node.properties.push(prop);\n    }\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n    prop.method = false;\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n    return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n  checkGetterSetterParams(method) {\n    var _params;\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, method);\n    }\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 134:\n            key = this.parseNumericLiteral(value);\n            break;\n          case 133:\n            key = this.parseStringLiteral(value);\n            break;\n          case 135:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case 136:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case 138:\n            {\n              const privateKeyLoc = this.state.startLoc;\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n              }\n              key = this.parsePrivateName();\n              break;\n            }\n          default:\n            this.unexpected();\n        }\n      }\n      prop.key = key;\n      if (type !== 138) {\n        prop.computed = false;\n      }\n    }\n    return prop.key;\n  }\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return finishedNode;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(2 | 4);\n    let flags = functionFlags(isAsync, false);\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= 8;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | 4);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node);\n        }\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, 65, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n  isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n  }\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: \"FormalParameters\"\n    };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: 5,\n        checkClashes,\n        strictModeChanged\n      });\n    }\n  }\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\"\n        });\n      }\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n    return elt;\n  }\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(liberal);\n    return this.createIdentifier(node, name);\n  }\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n  parseIdentifierName(liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(132);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n    this.next();\n    return name;\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word\n      });\n      return;\n    }\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n  parseAwait(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node);\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 137 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node);\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n      switch (this.state.type) {\n        case 13:\n        case 139:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n  parseImportCall(node) {\n    this.next();\n    node.source = this.parseMaybeAssignAllowIn();\n    if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n      node.options = null;\n    }\n    if (this.eat(12)) {\n      this.expectImportAttributesPlugin();\n      if (!this.match(11)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        this.eat(12);\n      }\n    }\n    this.expect(11);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n  parseSmartPipelineBodyInStyle(childExpr, startLoc) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = 8 & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | 8);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = 8 & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~8);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n  parseFSharpPipelineBody(prec) {\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    if (!this.match(5)) {\n      this.unexpected(null, 5);\n    }\n    const program = this.startNodeAt(this.state.endLoc);\n    this.next();\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n  parsePropertyNamePrefixOperator(prop) {}\n}\nconst loopLabel = {\n    kind: 1\n  },\n  switchLabel = {\n    kind: 2\n  };\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n    if (typeof type === \"number\") {\n      {\n        if (type === 138) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(132),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n    return this.finishNode(file, \"File\");\n  }\n  parseProgram(program, end = 139, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, at, {\n          localName\n        });\n      }\n    }\n    let finishedProgram;\n    if (end === 139) {\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      finishedProgram = this.finishNodeAt(program, \"Program\", createPositionWithColumnOffset(this.state.startLoc, -1));\n    }\n    return finishedProgram;\n  }\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n  isLet() {\n    if (!this.isContextual(100)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === 92) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  chStartsBindingPattern(ch) {\n    return ch === 91 || ch === 123;\n  }\n  hasFollowingBindingAtom() {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);\n  }\n  hasInLineFollowingBindingIdentifier() {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n  startsUsingForOf() {\n    const {\n      type,\n      containsEsc\n    } = this.lookahead();\n    if (type === 102 && !containsEsc) {\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n  startsAwaitUsing() {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n  parseModuleItem() {\n    return this.parseStatementLike(1 | 2 | 4 | 8);\n  }\n  parseStatementListItem() {\n    return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));\n  }\n  parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {\n    let flags = 0;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= 4;\n      if (allowLabeledFunction) {\n        flags |= 8;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n  parseStatement() {\n    return this.parseStatementLike(0);\n  }\n  parseStatementLike(flags) {\n    let decorators = null;\n    if (this.match(26)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n  parseStatementContent(flags, decorators) {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & 2);\n    const allowFunctionDeclaration = !!(flags & 4);\n    const topLevel = flags & 1;\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n      case 64:\n        return this.parseDebuggerStatement(node);\n      case 90:\n        return this.parseDoWhileStatement(node);\n      case 91:\n        return this.parseForStatement(node);\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);\n        }\n        return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);\n      case 80:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(this.maybeTakeDecorators(decorators, node), true);\n      case 69:\n        return this.parseIfStatement(node);\n      case 70:\n        return this.parseReturnStatement(node);\n      case 71:\n        return this.parseSwitchStatement(node);\n      case 72:\n        return this.parseThrowStatement(node);\n      case 73:\n        return this.parseTryStatement(node);\n      case 96:\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next();\n          return this.parseVarStatement(node, \"await using\");\n        }\n        break;\n      case 107:\n        if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(node, \"using\");\n      case 100:\n        {\n          if (this.state.containsEsc) {\n            break;\n          }\n          const next = this.nextTokenStart();\n          const nextCh = this.codePointAtPos(next);\n          if (nextCh !== 91) {\n            if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {\n              break;\n            }\n          }\n        }\n      case 75:\n        {\n          if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n          }\n        }\n      case 74:\n        {\n          const kind = this.state.value;\n          return this.parseVarStatement(node, kind);\n        }\n      case 92:\n        return this.parseWhileStatement(node);\n      case 76:\n        return this.parseWithStatement(node);\n      case 5:\n        return this.parseBlock();\n      case 13:\n        return this.parseEmptyStatement(node);\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n          }\n          this.next();\n          let result;\n          if (starttype === 83) {\n            result = this.parseImport(node);\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node, decorators);\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n          this.assertModuleNodeAllowed(result);\n          return result;\n        }\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (!allowDeclaration) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);\n            }\n            this.next();\n            return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);\n          }\n        }\n    }\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, flags);\n    } else {\n      return this.parseExpressionStatement(node, expr, decorators);\n    }\n  }\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n  decoratorsEnabledBeforeExport() {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false;\n  }\n  maybeTakeDecorators(maybeDecorators, classNode, exportNode) {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        if (typeof this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== \"boolean\") {\n          this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n  parseDecorators(allowExport) {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(26));\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n    return decorators;\n  }\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n    const node = this.startNode();\n    this.next();\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr;\n      if (this.match(10)) {\n        const startLoc = this.state.startLoc;\n        this.next();\n        expr = this.parseExpression();\n        this.expect(11);\n        expr = this.wrapParenthesis(startLoc, expr);\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (this.getPluginOption(\"decorators\", \"allowCallParenthesized\") === false && node.expression !== expr) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(138)) {\n            this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n    return expr;\n  }\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n  verifyBreakContinue(node, isBreak) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === 1)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, {\n        type\n      });\n    }\n  }\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n  parseDoWhileStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(0);\n    this.expect(10);\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n    const startsWithLet = this.isContextual(100);\n    {\n      const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();\n      const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;\n      if (this.match(74) || this.match(75) || isLetOrUsing) {\n        const initNode = this.startNode();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next();\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n        const isForIn = this.match(58);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if ((isForIn || this.isContextual(102)) && init.declarations.length === 1) {\n          return this.parseForIn(node, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, init);\n      }\n    }\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(102);\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, {\n        in: {\n          type\n        }\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n  parseFunctionStatement(node, isAsync, isHangingDeclaration) {\n    this.next();\n    return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));\n  }\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n    this.next();\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(0);\n    let cur;\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n  parseThrowStatement(node) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    this.scope.enter(this.options.annexB && param.type === \"Identifier\" ? 8 : 0);\n    this.checkLVal(param, {\n      in: {\n        type: \"CatchClause\"\n      },\n      binding: 9\n    });\n    return param;\n  }\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(0);\n      }\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n    return this.finishNode(node, \"TryStatement\");\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    return this.finishNode(node, \"WithStatement\");\n  }\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n  parseLabeledStatement(node, maybeName, expr, flags) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName\n        });\n      }\n    }\n    const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(5);\n    if (createNewLexicalScope) {\n      this.scope.enter(0);\n    }\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n    while (!this.match(end)) {\n      const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n          continue;\n        }\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n    afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n    this.next();\n  }\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n      });\n    }\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: {\n          type: \"ForStatement\"\n        }\n      });\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n  parseVar(node, isFor, kind, allowMissingInitializer = false) {\n    const declarations = node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(102)))) {\n          this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {\n            kind: \"destructuring\"\n          });\n        } else if (kind === \"const\" && !(this.match(58) || this.isContextual(102))) {\n          this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {\n            kind: \"const\"\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n    return node;\n  }\n  parseVarId(decl, kind) {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: {\n        type: \"VariableDeclarator\"\n      },\n      binding: kind === \"var\" ? 5 : 8201\n    });\n    decl.id = id;\n  }\n  parseAsyncFunctionExpression(node) {\n    return this.parseFunction(node, 8);\n  }\n  parseFunction(node, flags = 0) {\n    const hangingDeclaration = flags & 2;\n    const isDeclaration = !!(flags & 1);\n    const requireId = isDeclaration && !(flags & 4);\n    const isAsync = !!(flags & 8);\n    this.initFunction(node, isAsync);\n    if (this.match(55)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);\n      }\n      this.next();\n      node.generator = true;\n    }\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(2);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n    if (isDeclaration && !hangingDeclaration) {\n      this.registerFunctionStatementId(node);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n  parseFunctionParams(node, isConstructor) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));\n    this.expressionScope.exit();\n  }\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);\n  }\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n  isClassMethod() {\n    return this.match(10);\n  }\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);\n          }\n          continue;\n        }\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n        const member = this.startNode();\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n        this.parseClassMember(classBody, member, state);\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(106);\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(138);\n      this.parseClassElementName(method);\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(138);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n      method.kind = \"method\";\n      const isPrivate = this.match(138);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(138);\n      this.parseClassElementName(publicMethod);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(138);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n    if ((type === 132 || type === 133) && member.static && value === \"prototype\") {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n    if (type === 138) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n    return this.parsePropertyName(member);\n  }\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n    this.scope.enter(64 | 128 | 16);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(0);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);\n  }\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(Errors.ConstructorClassField, key);\n      }\n    }\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);\n    }\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? 6 : 2 : node.kind === \"set\" ? node.static ? 5 : 1 : 0;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {}\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n  parseInitializer(node) {\n    this.scope.enter(64 | 16);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(0);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n  parseClassId(node, isStatement, optionalId, bindingType = 8331) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n  parseExport(node, decorators) {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, 5);\n    }\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, 98);\n    }\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      var _node2$declaration;\n      const node2 = node;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n    if (this.eat(65)) {\n      const node2 = node;\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.checkExport(node2, true, true);\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n    this.unexpected(null, 5);\n  }\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode(id);\n      specifier.exported = id;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    if (this.match(68)) {\n      this.next();\n      return this.parseFunction(expr, 1 | 4);\n    } else if (this.isAsyncFunction()) {\n      this.next();\n      this.next();\n      return this.parseFunction(expr, 1 | 4 | 8);\n    }\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);\n    }\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n  parseExportDeclaration(node) {\n    if (this.match(80)) {\n      const node = this.parseClass(this.startNode(), true, false);\n      return node;\n    }\n    return this.parseStatementListItem();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 100) {\n        return false;\n      }\n      if ((type === 130 || type === 129) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n        if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n    return false;\n  }\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(98)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n    this.semicolon();\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n        return true;\n      }\n    }\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      var _node$specifiers;\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n          const declaration = node.declaration;\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n      } else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, {\n          exportName\n        });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(130);\n      const isString = this.match(133);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n    return nodes;\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n  parseModuleExportName() {\n    if (this.match(133)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n  isJSONModuleImport(node) {\n    if (node.assertions != null) {\n      return node.assertions.some(({\n        key,\n        value\n      }) => {\n        return value.value === \"json\" && (key.type === \"Identifier\" ? key.name === \"type\" : key.value === \"type\");\n      });\n    }\n    return false;\n  }\n  checkImportReflection(node) {\n    const {\n      specifiers\n    } = node;\n    const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);\n      }\n    } else if (node.module) {\n      var _node$assertions;\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);\n      }\n    }\n  }\n  checkJSONModuleImport(node) {\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      const {\n        specifiers\n      } = node;\n      if (specifiers != null) {\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\" ? imported.name !== \"default\" : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);\n        }\n      }\n    }\n  }\n  isPotentialImportPhase(isExport) {\n    if (isExport) return false;\n    return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    if (isExport) {\n      return;\n    }\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      node.phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      node.phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      node.phase = null;\n    }\n  }\n  parseMaybeImportPhase(node, isExport) {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(node, isExport, null);\n      return null;\n    }\n    const phaseIdentifier = this.parseIdentifier(true);\n    const {\n      type\n    } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);\n      return null;\n    } else {\n      this.applyImportPhase(node, isExport, null);\n      return phaseIdentifier;\n    }\n  }\n  isPrecedingIdImportPhase(phase) {\n    const {\n      type\n    } = this.state;\n    return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;\n  }\n  parseImport(node) {\n    if (this.match(133)) {\n      return this.parseImportSourceAndAttributes(node);\n    }\n    return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));\n  }\n  parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {\n    node.specifiers = [];\n    const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);\n    const parseNext = !hasDefault || this.eat(12);\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(98);\n    return this.parseImportSourceAndAttributes(node);\n  }\n  parseImportSourceAndAttributes(node) {\n    var _node$specifiers2;\n    (_node$specifiers2 = node.specifiers) != null ? _node$specifiers2 : node.specifiers = [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    if (!this.match(133)) this.unexpected();\n    return this.parseExprAtom();\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  finishImportSpecifier(specifier, type, bindingType = 8201) {\n    this.checkLVal(specifier.local, {\n      in: {\n        type\n      },\n      binding: bindingType\n    });\n    return this.finishNode(specifier, type);\n  }\n  parseImportAttributes() {\n    this.expect(5);\n    const attrs = [];\n    const attrNames = new Set();\n    do {\n      if (this.match(8)) {\n        break;\n      }\n      const node = this.startNode();\n      const keyName = this.state.value;\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {\n          key: keyName\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(133)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(14);\n      if (!this.match(133)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    this.expect(8);\n    return attrs;\n  }\n  parseModuleAttributes() {\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(14);\n      if (!this.match(133)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    return attrs;\n  }\n  maybeParseImportAttributes(node) {\n    let attributes;\n    let useWith = false;\n    if (this.match(76)) {\n      if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {\n        return;\n      }\n      this.next();\n      {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = this.parseModuleAttributes();\n        } else {\n          this.expectImportAttributesPlugin();\n          attributes = this.parseImportAttributes();\n        }\n      }\n      useWith = true;\n    } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !== true) {\n          this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next();\n      attributes = this.parseImportAttributes();\n    } else if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n      attributes = [];\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    }\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n  maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode(maybeDefaultIdentifier);\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"));\n      return true;\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const specifier = this.startNode();\n      const importedIsString = this.match(133);\n      const isMaybeTypeOnly = this.isContextual(130);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly, undefined);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: imported.value\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\", bindingType);\n  }\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file;\n  }\n}\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\nfunction parse(input, options) {\n  var _options;\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\nconst tokTypes = generateExportedTokenTypes(tt);\nfunction getParser(options, input) {\n  let cls = Parser;\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n  return new cls(options, input);\n}\nconst parserClassCache = {};\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","code","ModuleErrors","ImportMetaOutsideModule","message","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","StandardErrors","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeferImportRequiresNamespace","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","DynamicImportPhaseRequiresImportExpressions","phase","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidLhsOptionalChaining","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","map","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","key","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","SourcePhaseImportRequiresDefault","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","defineHidden","obj","value","Object","defineProperty","enumerable","configurable","toParseErrorConstructor","_ref","toMessage","properties","_objectWithoutPropertiesLoose","_excluded","loc","details","error","SyntaxError","assign","pos","clone","overrides","_overrides$loc","get","set","writable","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","keys","template","_ref2","rest","_excluded2","Errors","toUnenumerable","object","toESTreeLocation","node","estree","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","_node$arguments$","_node$arguments$2","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","length","_declaration$decorato","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","isOptionalMemberExpression","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_defer","_from","_get","_let","_meta","_of","_sent","_set","_source","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","i","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","Scope","names","firstLexicalName","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","add","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","commentsLen","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","topicContext","maxNumOfResolvableTopics","maxTopicIndex","labels","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","soloAwait","inFSharpPipelineDirectBody","canStartJSXElement","containsEsc","curPosition","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","val","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","annexB","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitialized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","_startLoc","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","applyImportPhase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitialized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","tsNames","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn$1","hasOwnProperty","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","operator","arg","checkToRestConversion","elt","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseAssignableListItem","parseBindingRestProperty","parseBindingProperty","parsePropertyName","_left","ObjectProperty","checkLVal","in","checkClashes","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","getOwn","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","expectImportAttributesPlugin","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","startType","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","reScan_lt_gt","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","isSatisfies","checkKeywords","checkDuplicateExports","importNode","parseMaybeImportPhase","parseImportSpecifiersAndAfter","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","placeholders","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createImportExpressions","createParenthesizedExpressions","getOptions","opts","_opts$key","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","_resultError$loc","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseImportCall","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","isSource","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifier","startsUsingForOf","startsAwaitUsing","parseModuleItem","parseStatementListItem","allowLabeledFunction","parseStatement","starttype","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_node$specifiers","_declaration$extra","nodes","surrogate","isJSONModuleImport","singleBindingType","_node$assertions","nonDefaultNamedSpecifier","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers2","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sources":["D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\util\\location.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parse-error\\module-errors.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parse-error\\to-node-description.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parse-error\\standard-errors.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parse-error\\strict-mode-errors.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parse-error\\pipeline-operator-errors.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parse-error.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\estree.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\tokenizer\\context.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\tokenizer\\types.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\babel-helper-validator-identifier\\src\\identifier.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\babel-helper-validator-identifier\\src\\keyword.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\util\\identifier.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\util\\scope.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\flow\\scope.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parser\\base.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parser\\comments.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\util\\whitespace.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\tokenizer\\state.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\babel-helper-string-parser\\src\\index.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\tokenizer\\index.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\util\\class-scope.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\util\\expression-scope.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\util\\production-parameter.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parser\\util.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parser\\node.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\flow\\index.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\jsx\\xhtml.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\jsx\\index.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\typescript\\scope.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parser\\lval.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\typescript\\index.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\placeholders.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugins\\v8intrinsic.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\plugin-utils.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\options.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parser\\expression.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parser\\statement.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\parser\\index.ts","D:\\Shoaib dev\\Rolex\\frontend-rolex\\node_modules\\@babel\\parser\\src\\index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n} satisfies ParseErrorTemplates;\n","import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error = new SyntaxError();\n    Object.assign(error, properties, { loc, pos: loc.index });\n    if (\"missingPlugin\" in details) {\n      Object.assign(error, { missingPlugin: details.missingPlugin });\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n","import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (\n          this.hasPlugin(\"importAttributes\") ||\n          this.hasPlugin(\"importAssertions\")\n        ) {\n          (node as N.Node as N.EstreeImportExpression).options =\n            node.arguments[1] ?? null;\n          // compatibility with previous ESTree AST\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length != commentsLen) this.comments.length = commentsLen;\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nconst enum StateFlags {\n  None = 0,\n  Strict = 1 << 0,\n  maybeInArrowParameters = 1 << 1,\n  inType = 1 << 2,\n  noAnonFunctionType = 1 << 3,\n  hasFlowComment = 1 << 4,\n  isAmbientContext = 1 << 5,\n  inAbstractClass = 1 << 6,\n  inDisallowConditionalTypesContext = 1 << 7,\n  soloAwait = 1 << 8,\n  inFSharpPipelineDirectBody = 1 << 9,\n  canStartJSXElement = 1 << 10,\n  containsEsc = 1 << 11,\n}\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\nexport default class State {\n  flags: number = StateFlags.canStartJSXElement;\n\n  get strict(): boolean {\n    return (this.flags & StateFlags.Strict) > 0;\n  }\n  set strict(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.Strict;\n    } else {\n      this.flags &= ~StateFlags.Strict;\n    }\n  }\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  get maybeInArrowParameters(): boolean {\n    return (this.flags & StateFlags.maybeInArrowParameters) > 0;\n  }\n  set maybeInArrowParameters(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.maybeInArrowParameters;\n    } else {\n      this.flags &= ~StateFlags.maybeInArrowParameters;\n    }\n  }\n  get inType(): boolean {\n    return (this.flags & StateFlags.inType) > 0;\n  }\n  set inType(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.inType;\n    } else {\n      this.flags &= ~StateFlags.inType;\n    }\n  }\n  get noAnonFunctionType(): boolean {\n    return (this.flags & StateFlags.noAnonFunctionType) > 0;\n  }\n  set noAnonFunctionType(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.noAnonFunctionType;\n    } else {\n      this.flags &= ~StateFlags.noAnonFunctionType;\n    }\n  }\n  get hasFlowComment(): boolean {\n    return (this.flags & StateFlags.hasFlowComment) > 0;\n  }\n  set hasFlowComment(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.hasFlowComment;\n    } else {\n      this.flags &= ~StateFlags.hasFlowComment;\n    }\n  }\n  get isAmbientContext(): boolean {\n    return (this.flags & StateFlags.isAmbientContext) > 0;\n  }\n  set isAmbientContext(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.isAmbientContext;\n    } else {\n      this.flags &= ~StateFlags.isAmbientContext;\n    }\n  }\n  get inAbstractClass(): boolean {\n    return (this.flags & StateFlags.inAbstractClass) > 0;\n  }\n  set inAbstractClass(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.inAbstractClass;\n    } else {\n      this.flags &= ~StateFlags.inAbstractClass;\n    }\n  }\n  get inDisallowConditionalTypesContext(): boolean {\n    return (this.flags & StateFlags.inDisallowConditionalTypesContext) > 0;\n  }\n  set inDisallowConditionalTypesContext(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.inDisallowConditionalTypesContext;\n    } else {\n      this.flags &= ~StateFlags.inDisallowConditionalTypesContext;\n    }\n  }\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  get soloAwait(): boolean {\n    return (this.flags & StateFlags.soloAwait) > 0;\n  }\n  set soloAwait(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.soloAwait;\n    } else {\n      this.flags &= ~StateFlags.soloAwait;\n    }\n  }\n  get inFSharpPipelineDirectBody(): boolean {\n    return (this.flags & StateFlags.inFSharpPipelineDirectBody) > 0;\n  }\n  set inFSharpPipelineDirectBody(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.inFSharpPipelineDirectBody;\n    } else {\n      this.flags &= ~StateFlags.inFSharpPipelineDirectBody;\n    }\n  }\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  get canStartJSXElement(): boolean {\n    return (this.flags & StateFlags.canStartJSXElement) > 0;\n  }\n  set canStartJSXElement(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.canStartJSXElement;\n    } else {\n      this.flags &= ~StateFlags.canStartJSXElement;\n    }\n  }\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  get containsEsc(): boolean {\n    return (this.flags & StateFlags.containsEsc) > 0;\n  }\n  set containsEsc(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.containsEsc;\n    } else {\n      this.flags &= ~StateFlags.containsEsc;\n    }\n  }\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n","import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Node,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n","import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectProperty,\n} from \"../types.ts\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags == ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types.ts\";\nimport type { Pos, Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwn(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(\n          this.parseAssignableListItemTypes(this.parseRestBinding(), flags),\n        );\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(\n    param: Pattern,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flags: ParseBindingListFlags,\n  ): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node) {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BindingFlag.TYPE_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingFlag;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { Expression } from \"../../types.ts\";\nimport type { IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwn(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  // TODO: Accesor -> Accessor\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      if (\n        this.hasPlugin(\"importAttributes\") ||\n        this.hasPlugin(\"importAssertions\")\n      ) {\n        node.options = null;\n      }\n      if (this.eat(tt.comma)) {\n        this.expectImportAttributesPlugin();\n        if (!this.match(tt.parenR)) {\n          node.options = super.parseMaybeAssignAllowIn();\n          this.eat(tt.comma);\n        }\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccesorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccesorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccesorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccesorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccesorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left, flags);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            /* isExport */ false,\n          );\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: parameter.name.name,\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(\n      param: N.Pattern,\n      flags: ParseBindingListFlags,\n    ) {\n      if (!(flags & ParseBindingListFlags.IS_FUNCTION_PARAMS)) return param;\n\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression as N.UnaryExpression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n","import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser/index.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAttributes` parser plugin, or `@babel/plugin-syntax-import-attributes`.\",\n      );\n    } else {\n      if (\n        hasPlugin(plugins, \"importAssertions\") ||\n        hasPlugin(plugins, \"importAttributes\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (\n    hasPlugin(plugins, \"importAssertions\") &&\n    hasPlugin(plugins, \"importAttributes\")\n  ) {\n    throw new Error(\n      \"Cannot combine importAssertions and importAttributes plugins.\",\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    hasPlugin(plugins, \"optionalChainingAssign\") &&\n    getPluginOption(plugins, \"optionalChainingAssign\", \"version\") !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowNewTargetOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createImportExpressions: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n  annexB: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, new.target outside a function or class is not\n  // considered an error.\n  allowNewTargetOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ImportExpression AST nodes (if false\n  // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n  createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n  // When enabled, the parser will support Annex B syntax.\n  // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n  annexB: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  if (opts == null) {\n    return { ...defaultOptions };\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions) as (keyof Options)[]) {\n    options[key] = opts[key] ?? defaultOptions[key];\n  }\n  return options;\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors, type ParseError } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type { SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  expectImportAttributesPlugin() {\n    if (!this.hasPlugin(\"importAssertions\")) {\n      this.expectPlugin(\"importAttributes\");\n    }\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectImportAttributesPlugin();\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectImportAttributesPlugin();\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node, {\n          maxArgumentCount:\n            this.hasPlugin(\"importAttributes\") ||\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAttributes\") &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              Errors.ImportCallArgumentTrailingComma,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.options.createImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          startLoc,\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      // TODO: The proposal doesn't mention import.defer yet because it was\n      // pending on a decision for import.source. Wait to enable it until it's\n      // included in the proposal.\n      if (!isSource) this.unexpected();\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!this.options.createImportExpressions) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.options = null;\n    }\n    if (this.eat(tt.comma)) {\n      this.expectImportAttributesPlugin();\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport type { SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, at, { localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BindingFlag.TYPE_CATCH_PARAM,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"const\",\n            },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, key);\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      this.isContextual(tt._module)\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (phase === \"module\" || phase === \"source\") {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `module` in `import module x from \"x\"`, disambiguating\n   * `import module from \"x\"` and `import module from from \"x\"`.\n   *\n   * This function might return an identifier representing the `module`\n   * if it eats `module` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins.\n   *\n   * Note: the proposal has been updated to use `source` instead of `module`,\n   * but it has not been implemented yet.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, {\n      in: { type },\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n  ) {\n    let attributes: N.ImportAttribute[];\n    let useWith = false;\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = this.parseModuleAttributes();\n        } else {\n          this.expectImportAttributesPlugin();\n          attributes = this.parseImportAttributes();\n        }\n      } else {\n        this.expectImportAttributesPlugin();\n        attributes = this.parseImportAttributes();\n      }\n      useWith = true;\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (\n          this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !==\n          true\n        ) {\n          this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      attributes = [];\n    } else if (!process.env.BABEL_8_BREAKING) {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    } else return;\n\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport type { PluginList } from \"../plugin-utils.ts\";\nimport { getOptions } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import type { Options } from \"./options.ts\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils.ts\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings.ts\";\nimport Parser from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\n\nimport type { Expression, File } from \"./types.ts\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"mappings":"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C,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC;AAEx+C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}