{"ast":null,"code":"var _jsxFileName = \"D:\\\\Shoaib dev\\\\Rolex\\\\frontend-rolex\\\\src\\\\Pages\\\\Admin\\\\Components\\\\LoginWithGoogle.jsx\";\nimport React from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport Helpers from '../../../Config/Helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginWithGoogle = () => {\n  const responseGoogle = async response => {\n    console.log(\"Token from Google:\", response.tokenId);\n    await sendTokenToBackend(response.tokenId);\n  };\n  const sendTokenToBackend = async googleToken => {\n    const apiURL = Helpers.apiUrl; // Ensure this is correctly defined\n    try {\n      const response = await axios.post(`${apiURL}/auth/google`, {\n        usertoken: googleToken\n      }, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.status === 200) {\n        console.log(\"Success:\", response.data);\n      } else {\n        console.log(\"Response received:\", response.data);\n      }\n    } catch (error) {\n      if (error.response) {\n        console.error(\"Error fetching details:\", error.response.data);\n      } else {\n        console.error(\"Error fetching details:\", error.message);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    clientId: \"341429096489-e24lk8sq54ku9blm9o68v558pqces2mo.apps.googleusercontent.com\" // Replace with your actual client ID\n    ,\n    buttonText: \"Login with Google\",\n    onSuccess: responseGoogle,\n    onFailure: responseGoogle,\n    cookiePolicy: 'single_host_origin',\n    scope: \"profile email https://www.googleapis.com/auth/userinfo.email\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_c = LoginWithGoogle;\nexport default LoginWithGoogle;\nvar _c;\n$RefreshReg$(_c, \"LoginWithGoogle\");","map":{"version":3,"names":["React","GoogleLogin","Helpers","jsxDEV","_jsxDEV","LoginWithGoogle","responseGoogle","response","console","log","tokenId","sendTokenToBackend","googleToken","apiURL","apiUrl","axios","post","usertoken","headers","Accept","status","data","error","message","clientId","buttonText","onSuccess","onFailure","cookiePolicy","scope","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Shoaib dev/Rolex/frontend-rolex/src/Pages/Admin/Components/LoginWithGoogle.jsx"],"sourcesContent":["import React from 'react';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport Helpers from '../../../Config/Helpers';\r\nconst LoginWithGoogle = () => {\r\n    const responseGoogle = async (response) => {\r\n        console.log(\"Token from Google:\", response.tokenId);\r\n        await sendTokenToBackend(response.tokenId);\r\n    };\r\n\r\n    const sendTokenToBackend = async (googleToken) => {\r\n        const apiURL = Helpers.apiUrl; // Ensure this is correctly defined\r\n        try {\r\n            const response = await axios.post(`${apiURL}/auth/google`, { usertoken: googleToken }, {\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                console.log(\"Success:\", response.data);\r\n            } else {\r\n                console.log(\"Response received:\", response.data);\r\n            }\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.error(\"Error fetching details:\", error.response.data);\r\n            } else {\r\n                console.error(\"Error fetching details:\", error.message);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <GoogleLogin\r\n            clientId=\"341429096489-e24lk8sq54ku9blm9o68v558pqces2mo.apps.googleusercontent.com\" // Replace with your actual client ID\r\n            buttonText=\"Login with Google\"\r\n            onSuccess={responseGoogle}\r\n            onFailure={responseGoogle}\r\n            cookiePolicy={'single_host_origin'}\r\n            scope=\"profile email https://www.googleapis.com/auth/userinfo.email\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginWithGoogle;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,oBAAoB;AAChD,OAAOC,OAAO,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC9C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;IACvCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAACG,OAAO,CAAC;IACnD,MAAMC,kBAAkB,CAACJ,QAAQ,CAACG,OAAO,CAAC;EAC9C,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAOC,WAAW,IAAK;IAC9C,MAAMC,MAAM,GAAGX,OAAO,CAACY,MAAM,CAAC,CAAC;IAC/B,IAAI;MACA,MAAMP,QAAQ,GAAG,MAAMQ,KAAK,CAACC,IAAI,CAAE,GAAEH,MAAO,cAAa,EAAE;QAAEI,SAAS,EAAEL;MAAY,CAAC,EAAE;QACnFM,OAAO,EAAE;UACLC,MAAM,EAAE,kBAAkB;UAC1B,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAIZ,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;QACzBZ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,QAAQ,CAACc,IAAI,CAAC;MAC1C,CAAC,MAAM;QACHb,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAACc,IAAI,CAAC;MACpD;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,IAAIA,KAAK,CAACf,QAAQ,EAAE;QAChBC,OAAO,CAACc,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACf,QAAQ,CAACc,IAAI,CAAC;MACjE,CAAC,MAAM;QACHb,OAAO,CAACc,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACC,OAAO,CAAC;MAC3D;IACJ;EACJ,CAAC;EAED,oBACInB,OAAA,CAACH,WAAW;IACRuB,QAAQ,EAAC,0EAA0E,CAAC;IAAA;IACpFC,UAAU,EAAC,mBAAmB;IAC9BC,SAAS,EAAEpB,cAAe;IAC1BqB,SAAS,EAAErB,cAAe;IAC1BsB,YAAY,EAAE,oBAAqB;IACnCC,KAAK,EAAC;EAA8D;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEV,CAAC;AAACC,EAAA,GAxCI7B,eAAe;AA0CrB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}